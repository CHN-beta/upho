#!/usr/bin/env python
import os
import h5py
import numpy as np
from phonopy.cui.settings import PhonopyConfParser
from phonopy.interface.vasp import read_vasp
from phonopy.structure.cells import get_primitive
from upho.file_io import read_input


class Separation:
    def __init__(self, conf_file, input_file, structure_ideal):
        self._conf_file = conf_file
        self._input_file = input_file

        phonopy_conf = PhonopyConfParser(filename=self._conf_file,
                                         option_list=[])
        self._settings = phonopy_conf.get_settings()

        self._distance = 0.

        self.create_primitive_cell(structure_ideal)

        self._paths = np.array(self._settings.get_bands())
        print(self._paths)

        self.analyze_paths()

        self.write_hdf5()

        self.write_input()

    def analyze_paths(self):
        self.create_distances()

    def create_primitive_cell(self, poscar_file):
        primitive_matrix = self._settings.get_primitive_matrix()
        atoms = read_vasp(poscar_file)
        self._cell = get_primitive(atoms, primitive_matrix)

    def _set_initial_point(self, qpoint):
        self._lastq = qpoint.copy()

    def _shift_point(self, qpoint):
        self._distance += np.linalg.norm(
            np.dot(qpoint - self._lastq,
                   np.linalg.inv(self._cell.get_cell()).T))
        self._lastq = qpoint.copy()

    def write_input(self):
        import json

        if self._input_file is not None:
            dict_input = read_input(self._input_file)
        else:
            dict_input = {}

        dict_input["run_mode"] = "single_point"
        for ipath, path in enumerate(self._paths):
            for iq, qpoint in enumerate(path):
                dict_input["qpoint"] = list(qpoint)
                dict_input["distance"] = self._distances[ipath, iq]

                dirname = '{}/{}/'.format(ipath, iq)
                if not os.path.isdir(dirname):
                    os.makedirs(dirname)
                filename = "{}input.json".format(dirname)
                with open(filename, "w") as f:
                    f.write(json.dumps(dict_input, indent=4))

                files = [
                    "POSCAR",
                    "POSCAR_ideal",
                    "FORCE_CONSTANTS",
                    self._conf_file,
                ]

                os.chdir(dirname)
                for f in files:
                    if os.path.isfile(f):
                        os.remove(f)
                    os.symlink("../../" + f, f)
                os.chdir("../../")

    def create_distances(self):
        distances = []
        for path in self._paths:
            self._set_initial_point(path[0])
            distances_on_path = []
            for i, q in enumerate(path):
                self._shift_point(q)
                distances_on_path.append(self._distance)
            distances.append(distances_on_path)
        distances = np.array(distances)
        print(distances)
        self._distances = distances

    def write_hdf5(self):
        with h5py.File('band.hdf5', 'w') as w:
            w.create_dataset('paths', data=self._paths)

            # Create groups using ExternalLink
            for ipath, path in enumerate(self._paths):
                for ip, point in enumerate(path):
                    group = '{}/{}/'.format(ipath, ip)
                    w[group] = h5py.ExternalLink(group + 'point.hdf5', '/')


def main():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input_file",
                        type=str,
                        help="Input file for unfolding.")
    parser.add_argument("conf_file",
                        type=str,
                        help="Phonopy conf file")
    args = parser.parse_args()

    Separation(args.conf_file, args.input_file, structure_ideal="POSCAR_ideal")

if __name__ == "__main__":
    main()
